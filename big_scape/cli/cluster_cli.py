""" Click parameters for the BiG-SCAPE Cluster CLI command """

# from python
import click

# from other modules
from big_scape.run_bigscape import run_bigscape
from big_scape.diagnostics import init_logger, init_logger_file
import big_scape.enums as bs_enums

# from this module
from .cli_common_options import common_all, common_cluster_query, common_cluster_query_dereplicate
from .cli_validations import (
    validate_classify,
    validate_class_category_filter,
    validate_output_paths,
    validate_disk_only,
    validate_binning_cluster_workflow,
    validate_pfam_path,
    validate_domain_include_list,
    set_start,
)


@click.command()
@common_all
@common_cluster_query_dereplicate
@common_cluster_query
# binning parameters
@click.option(
    "--classify",
    type=click.Choice(["none", "class", "category", "legacy"]),
    default="category",
    callback=validate_classify,
    help=(
        """Define which method BiG-SCAPE should use to separate BGC records into
analysis bins. '--classify class' and '--classify category' use antiSMASH/BGC classes
(e.g. T2PKS) or categories (e.g. PKS) to run analyses on class/category-based
bins, respectively.

'--classify legacy' is based on BiG-SCAPE v1 predefined groups:
PKS1, PKSOther, NRPS, NRPS-PKS-hybrid, RiPP, Saccharide, Terpene, Others,
and will automatically use complementary '--legacy-weights'.
'--classify legacy' is available for backwards compatibility with input .gbks
generated with antiSMASH versions up to version 7. For higher antiSMASH
versions, use at your own risk, as BGC classes may have changed. All antiSMASH
classes that this legacy mode does not recognise will be grouped in 'others'.
To update the antiSMASH classes list yourself, see the config.yml file.

'--classify class' and '--classify category' can be used in combination with
--legacy-weights if input .gbks have been generated by antiSMASH version 6 or
higher. For older antiSMASH versions, either use --classify 'legacy' or do not
select --legacy_weights, which will perform the weighted distance calculations
based on the generic 'mix' weights. For more detail, see wiki.
(default: category)"""
    ),
)
@click.option(
    "--mix",
    is_flag=True,
    help=(
        "Calculate distances using a 'mix' bin, wherein no classification is applied. "
        "This will do an all-vs-all comparison of all input BGC records. "
        "This bin will use weights from the 'mix' weights distribution: "
        "{JC: 0.2, AI: 0.05, DSS: 0.75, Anchor boost: 2.0}. For more detail, see wiki."
    ),
)
# comparison parameters
@click.option(
    "--hybrids-off",
    is_flag=True,
    help=(
        "Toggle to add BGC records with hybrid predicted classes/categories to each "
        "subclass instead of a hybrid class/network (e.g. a 'terpene-nrps' BGC "
        "would be added to both the terpene and NRPS classes/networks instead of "
        "the terpene.nrps network). "
        "Only works if any --classify mode is selected."
    ),
)
@click.option(
    "--exclude-categories",
    callback=validate_class_category_filter,
    help=(
        "A comma separated list of categories. BGCs that have at least one of the product "
        "categories in this list will be excluded from the comparison (e.g. 'NRPS,PKS' "
        "will exclude all NRPS or PKS BGCs, even hybrids like NRPS-terpene). Only "
        "available for .gbks produced by antiSMASH version 6 or higher."
    ),
)
@click.option(
    "--include-categories",
    callback=validate_class_category_filter,
    help=(
        "A comma separated list of categories. Only BGCs that have at least one of the "
        "product categories in this list will be included in the comparison (e.g. 'NRPS' "
        "will include only NRPS BGCs, including hybrids like NRPS-PKS). Only available "
        "for .gbks produced by antiSMASH version 6 or higher."
    ),
)
@click.option(
    "--exclude-classes",
    callback=validate_class_category_filter,
    help=(
        "A comma separated list of classes. BGCs that have at least one of the product "
        "classes in this list will be excluded from the comparison (e.g. 'T1PKS,T2PKS' "
        "will exclude all T1PKS and T2PKS BGCs, even hybrids like NRPS-T1PKS)."
    ),
)
@click.option(
    "--include-classes",
    callback=validate_class_category_filter,
    help=(
        "A comma separated list of classes. Only BGCs that have at least one of the "
        "product classes in this list will be included in the comparison (e.g. 'T1PKS' "
        "will include only T1PKS BGCs, including hybrids like NRPS-T1PKS)."
    ),
)
# networking parameters
@click.option(
    "--include-singletons",
    is_flag=True,
    help=(
        "Include singletons in the networ and all respective output."
        " Reference singletons will not be included even if this is toggled."
    ),
)
@click.pass_context
def cluster(ctx, *args, **kwargs):
    """
    BiG-SCAPE - CLUSTER

    Clustering mode - BiG-SCAPE performs clustering of BGCs into GCFs.
    For a more comprehensive help menu and tutorials see GitHub Wiki.
    \f
    :param click.core.Context ctx: Click context.
    """
    # get context parameters
    ctx.obj.update(ctx.params)
    ctx.obj["query_bgc_path"] = None
    ctx.obj["propagate"] = True  # compatibility with query wrt cc generation
    ctx.obj["mode"] = bs_enums.input_parameters.RUN_MODE.CLUSTER

    # TODO: remove when reimplementing disk-only
    ctx.obj["disk_only"] = False

    # set start time and run label
    set_start(ctx.obj)

    # workflow validations
    validate_binning_cluster_workflow(ctx)
    validate_pfam_path(ctx)
    validate_domain_include_list(ctx)
    validate_output_paths(ctx)
    validate_disk_only(ctx)

    # initialize logger
    init_logger(ctx.obj)
    init_logger_file(ctx.obj)

    # run BiG-SCAPE cluster
    run_bigscape(ctx.obj)
