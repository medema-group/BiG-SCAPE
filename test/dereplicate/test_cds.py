"""Contains tests for the CDS component"""

# from python
from unittest import TestCase
from pathlib import Path
import logging

# from dependencies
from Bio.SeqFeature import SeqFeature, FeatureLocation, Seq
from Bio.SeqRecord import SeqRecord

# from other modules
from big_scape.dereplicating.gbk_components import CDS
from big_scape.dereplicating.gbk_components.gbk import GBK
import big_scape.enums as bs_enums


class TestCDSComponent(TestCase):
    """Test class for the CDS component"""

    def test_parse_no_translation_issues(self):
        """Tests whether the parse function correctly returns a CDS component from a SeqFeature object"""

        gbk = GBK(Path(""), "hash", 10, "1", bs_enums.SOURCE_TYPE.QUERY)

        nt_seq = Seq("ATGCAGCAGGACGGCACACAGCAGGACCGGATCAAGCAGAGTCCCGCCCCTCTCTGA")
        seqIO_record = SeqRecord(id="test", seq=nt_seq)

        expected_transl_nt_seq = Seq("MQQDGTQQDRIKQSPAPL")

        feature = SeqFeature(
            FeatureLocation(0, 57, strand=1),
            type="CDS",
            qualifiers={"translation": [expected_transl_nt_seq]},
        )

        cds = CDS.parse(feature, seqIO_record, gbk)

        self.assertIsInstance(cds, CDS)

    def test_parse_translation_warning(self):
        """Tests whether the parse function raises a warning if there is a mismatch between the translation provided
        by antiSMASH and the one generated by biopython"""

        gbk = GBK(Path(""), "hash", 10, "1", bs_enums.SOURCE_TYPE.QUERY)

        nt_seq = Seq("ATGCAGCAGGACGGCACACAGCAGGACCGGATCAAGCAGAGTCCCGCCCCTCTCTGA")
        seqIO_record = SeqRecord(id="test", seq=nt_seq)

        # expected_transl_nt_seq = Seq("MQQDGTQQDRIKQSPAPL")
        other_transl_nt_seq = Seq("MQQDGTQQDJFNGDHYDHA")

        feature = SeqFeature(
            FeatureLocation(0, 57, strand=1),
            type="CDS",
            qualifiers={"translation": [other_transl_nt_seq]},
        )

        with self.assertLogs(level=logging.DEBUG) as cm:
            logging.info("nonsense")
            CDS.parse(feature, seqIO_record, gbk)

        # cm.output a list of strings of all the logs
        str = " translation provided by antiSMASH and generated by biopython"

        warning = any(str in log for log in cm.output)
        self.assertEqual(warning, True)

    def test_parse_no_translation_generated(self):
        """Tests whether the parse cds function correctly returns None when translation cannot be obtained"""

        gbk = GBK(Path(""), "hash", 10, "1", bs_enums.SOURCE_TYPE.QUERY)

        nt_seq = Seq("ATGCAGCAGGACGGCACAC")
        seqIO_record = SeqRecord(id="test", seq=nt_seq)

        feature = SeqFeature(FeatureLocation(5, 10, strand=1), type="CDS")

        cds = CDS.parse(feature, seqIO_record, gbk)

        self.assertEqual(cds, None)

        with self.assertLogs(level=logging.DEBUG) as cm:
            logging.info("nonsense")
            CDS.parse(feature, seqIO_record, gbk)

        # cm.output a list of strings of all the logs
        str = " translation not found in cds feature and could not be generated,"

        warning = any(str in log for log in cm.output)
        self.assertEqual(warning, True)
